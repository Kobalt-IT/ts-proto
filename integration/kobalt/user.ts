// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: user.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "@grpc/grpc-js";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "kobalt";

export interface GrpcUser {
  id: number;
  firstName: string;
  middleName: string | null;
  lastName: string | null;
  code: string;
  contacts: GrpcUserContact[];
}

export interface GrpcUserContact {
  type: GrpcUserContactType;
  value: string;
  primary: boolean;
}

export enum GrpcUserContactType {
  EMAIL = 0,
  PHONE = 1,
  UNRECOGNIZED = -1,
}

export interface GrpcUserInitRequest {
  id: string;
  username: string;
  email: string | null;
}

export interface GrpcUserInitResponse {
  user: GrpcUser | null;
}

export const KOBALT_PACKAGE_NAME = "kobalt";

function createBaseGrpcUser(): GrpcUser {
  return { id: 0, firstName: "", middleName: null, lastName: null, code: "", contacts: [] };
}

export const GrpcUser: MessageFns<GrpcUser> = {
  encode(message: GrpcUser, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    if (message.firstName !== "") {
      writer.uint32(18).string(message.firstName);
    }
    if (message.middleName !== null) {
      writer.uint32(26).string(message.middleName);
    }
    if (message.lastName !== null) {
      writer.uint32(34).string(message.lastName);
    }
    if (message.code !== "") {
      writer.uint32(42).string(message.code);
    }
    for (const v of message.contacts) {
      GrpcUserContact.encode(v!, writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcUser {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcUser();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.firstName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.middleName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.lastName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.code = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.contacts.push(GrpcUserContact.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcUserContact(): GrpcUserContact {
  return { type: 0, value: "", primary: false };
}

export const GrpcUserContact: MessageFns<GrpcUserContact> = {
  encode(message: GrpcUserContact, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.primary !== false) {
      writer.uint32(24).bool(message.primary);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcUserContact {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcUserContact();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.primary = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcUserInitRequest(): GrpcUserInitRequest {
  return { id: "", username: "", email: null };
}

export const GrpcUserInitRequest: MessageFns<GrpcUserInitRequest> = {
  encode(message: GrpcUserInitRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.email !== null) {
      writer.uint32(26).string(message.email);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcUserInitRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcUserInitRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.email = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcUserInitResponse(): GrpcUserInitResponse {
  return { user: null };
}

export const GrpcUserInitResponse: MessageFns<GrpcUserInitResponse> = {
  encode(message: GrpcUserInitResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.user !== null) {
      GrpcUser.encode(message.user, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcUserInitResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcUserInitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.user = GrpcUser.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

export interface UserServiceClient {
  userInit(request: GrpcUserInitRequest, metadata?: Metadata): Observable<GrpcUserInitResponse>;
}

export interface UserServiceController {
  userInit(
    request: GrpcUserInitRequest,
    metadata?: Metadata,
  ): Promise<GrpcUserInitResponse> | Observable<GrpcUserInitResponse> | GrpcUserInitResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["userInit"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";

export type UserServiceService = typeof UserServiceService;
export const UserServiceService = {
  userInit: {
    path: "/kobalt.UserService/UserInit",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GrpcUserInitRequest) => Buffer.from(GrpcUserInitRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GrpcUserInitRequest.decode(value),
    responseSerialize: (value: GrpcUserInitResponse) => Buffer.from(GrpcUserInitResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GrpcUserInitResponse.decode(value),
  },
} as const;

export interface UserServiceServer extends UntypedServiceImplementation {
  userInit: handleUnaryCall<GrpcUserInitRequest, GrpcUserInitResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
