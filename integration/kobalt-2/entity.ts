// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: entity.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Metadata } from "@grpc/grpc-js";
import type { handleUnaryCall, UntypedServiceImplementation } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";
import { GrpcStruct } from "./google/protobuf/struct";

export const protobufPackage = "kobalt2";

export interface GrpcFindOneByIdRequest {
  id: number;
}

export interface GrpcFindOneByIdResponse {
  entity: { [key: string]: any } | null;
}

export interface GrpcFindByIdsRequest {
  ids: number[];
}

export interface GrpcFindByIdsResponse {
  entities: { [key: string]: any }[];
}

export const KOBALT2_PACKAGE_NAME = "kobalt2";

function createBaseGrpcFindOneByIdRequest(): GrpcFindOneByIdRequest {
  return { id: 0 };
}

export const GrpcFindOneByIdRequest: MessageFns<GrpcFindOneByIdRequest> = {
  encode(message: GrpcFindOneByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcFindOneByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcFindOneByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcFindOneByIdResponse(): GrpcFindOneByIdResponse {
  return { entity: null };
}

export const GrpcFindOneByIdResponse: MessageFns<GrpcFindOneByIdResponse> = {
  encode(message: GrpcFindOneByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.entity !== null) {
      GrpcStruct.encode(GrpcStruct.wrap(message.entity), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcFindOneByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcFindOneByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entity = GrpcStruct.unwrap(GrpcStruct.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcFindByIdsRequest(): GrpcFindByIdsRequest {
  return { ids: [] };
}

export const GrpcFindByIdsRequest: MessageFns<GrpcFindByIdsRequest> = {
  encode(message: GrpcFindByIdsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    writer.uint32(10).fork();
    for (const v of message.ids) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcFindByIdsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcFindByIdsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag === 8) {
            message.ids.push(reader.int32());

            continue;
          }

          if (tag === 10) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.ids.push(reader.int32());
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcFindByIdsResponse(): GrpcFindByIdsResponse {
  return { entities: [] };
}

export const GrpcFindByIdsResponse: MessageFns<GrpcFindByIdsResponse> = {
  encode(message: GrpcFindByIdsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.entities) {
      GrpcStruct.encode(GrpcStruct.wrap(v!), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcFindByIdsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcFindByIdsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.entities.push(GrpcStruct.unwrap(GrpcStruct.decode(reader, reader.uint32())));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

wrappers[".google.protobuf.Struct"] = { fromObject: GrpcStruct.wrap, toObject: GrpcStruct.unwrap } as any;

export interface EntityServiceClient {
  findOneById(request: GrpcFindOneByIdRequest, metadata?: Metadata): Observable<GrpcFindOneByIdResponse>;

  findByIds(request: GrpcFindByIdsRequest, metadata?: Metadata): Observable<GrpcFindByIdsResponse>;
}

export interface EntityServiceController {
  findOneById(
    request: GrpcFindOneByIdRequest,
    metadata?: Metadata,
  ): Promise<GrpcFindOneByIdResponse> | Observable<GrpcFindOneByIdResponse> | GrpcFindOneByIdResponse;

  findByIds(
    request: GrpcFindByIdsRequest,
    metadata?: Metadata,
  ): Promise<GrpcFindByIdsResponse> | Observable<GrpcFindByIdsResponse> | GrpcFindByIdsResponse;
}

export function EntityServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOneById", "findByIds"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("EntityService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("EntityService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ENTITY_SERVICE_NAME = "EntityService";

export type EntityServiceService = typeof EntityServiceService;
export const EntityServiceService = {
  findOneById: {
    path: "/kobalt2.EntityService/FindOneById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GrpcFindOneByIdRequest) => Buffer.from(GrpcFindOneByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GrpcFindOneByIdRequest.decode(value),
    responseSerialize: (value: GrpcFindOneByIdResponse) => Buffer.from(GrpcFindOneByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GrpcFindOneByIdResponse.decode(value),
  },
  findByIds: {
    path: "/kobalt2.EntityService/FindByIds",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GrpcFindByIdsRequest) => Buffer.from(GrpcFindByIdsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GrpcFindByIdsRequest.decode(value),
    responseSerialize: (value: GrpcFindByIdsResponse) => Buffer.from(GrpcFindByIdsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GrpcFindByIdsResponse.decode(value),
  },
} as const;

export interface EntityServiceServer extends UntypedServiceImplementation {
  findOneById: handleUnaryCall<GrpcFindOneByIdRequest, GrpcFindOneByIdResponse>;
  findByIds: handleUnaryCall<GrpcFindByIdsRequest, GrpcFindByIdsResponse>;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}
