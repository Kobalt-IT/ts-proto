// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// source: google/protobuf/struct.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { wrappers } from "protobufjs";

export const protobufPackage = "google.protobuf";

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
 * `Value` type union.
 *
 *  The JSON representation for `NullValue` is JSON `null`.
 */
export enum GrpcNullValue {
  /** NULL_VALUE - Null value. */
  NULL_VALUE = 0,
  UNRECOGNIZED = -1,
}

/**
 * `Struct` represents a structured data value, consisting of fields
 * which map to dynamically typed values. In some languages, `Struct`
 * might be supported by a native representation. For example, in
 * scripting languages like JS a struct is represented as an
 * object. The details of that representation are described together
 * with the proto support for the language.
 *
 * The JSON representation for `Struct` is JSON object.
 */
export interface GrpcStruct {
  /** Unordered map of dynamically typed values. */
  fields: { [key: string]: any | undefined };
}

export interface GrpcStructFieldsEntry {
  key: string;
  value: any | undefined;
}

/**
 * `Value` represents a dynamically typed value which can be either
 * null, a number, a string, a boolean, a recursive struct value, or a
 * list of values. A producer of value is expected to set one of these
 * variants. Absence of any variant indicates an error.
 *
 * The JSON representation for `Value` is JSON value.
 */
export interface GrpcValue {
  /** The kind of value. */
  kind?:
    | //
    /** Represents a null value. */
    { $case: "nullValue"; value: GrpcNullValue }
    | //
    /** Represents a double value. */
    { $case: "numberValue"; value: number }
    | //
    /** Represents a string value. */
    { $case: "stringValue"; value: string }
    | //
    /** Represents a boolean value. */
    { $case: "boolValue"; value: boolean }
    | //
    /** Represents a structured value. */
    { $case: "structValue"; value: { [key: string]: any } | undefined }
    | //
    /** Represents a repeated `Value`. */
    { $case: "listValue"; value: Array<any> | undefined }
    | undefined;
}

/**
 * `ListValue` is a wrapper around a repeated field of values.
 *
 * The JSON representation for `ListValue` is JSON array.
 */
export interface GrpcListValue {
  /** Repeated field of dynamically typed values. */
  values: any[];
}

export const GOOGLE_PROTOBUF_PACKAGE_NAME = "google.protobuf";

function createBaseGrpcStruct(): GrpcStruct {
  return { fields: {} };
}

export const GrpcStruct: MessageFns<GrpcStruct> & StructWrapperFns = {
  encode(message: GrpcStruct, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    Object.entries(message.fields).forEach(([key, value]) => {
      if (value !== undefined) {
        GrpcStructFieldsEntry.encode({ key: key as any, value }, writer.uint32(10).fork()).join();
      }
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcStruct {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcStruct();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          const entry1 = GrpcStructFieldsEntry.decode(reader, reader.uint32());
          if (entry1.value !== undefined) {
            message.fields[entry1.key] = entry1.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  wrap(object: { [key: string]: any } | undefined): GrpcStruct {
    const struct = createBaseGrpcStruct();

    if (object !== undefined) {
      for (const key of Object.keys(object)) {
        struct.fields[key] = GrpcValue.wrap(object[key]);
      }
    }
    return struct;
  },

  unwrap(message: GrpcStruct): { [key: string]: any } {
    const object: { [key: string]: any } = {};
    if (message.fields) {
      for (const key of Object.keys(message.fields)) {
        object[key] = GrpcValue.unwrap(message.fields[key]);
      }
    }
    return object;
  },
};

function createBaseGrpcStructFieldsEntry(): GrpcStructFieldsEntry {
  return { key: "", value: undefined };
}

export const GrpcStructFieldsEntry: MessageFns<GrpcStructFieldsEntry> = {
  encode(message: GrpcStructFieldsEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      GrpcValue.encode(GrpcValue.wrap(message.value), writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcStructFieldsEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcStructFieldsEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = GrpcValue.unwrap(GrpcValue.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },
};

function createBaseGrpcValue(): GrpcValue {
  return { kind: undefined };
}

export const GrpcValue: MessageFns<GrpcValue> & AnyValueWrapperFns = {
  encode(message: GrpcValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.kind?.$case) {
      case "nullValue":
        writer.uint32(8).int32(message.kind.value);
        break;
      case "numberValue":
        writer.uint32(17).double(message.kind.value);
        break;
      case "stringValue":
        writer.uint32(26).string(message.kind.value);
        break;
      case "boolValue":
        writer.uint32(32).bool(message.kind.value);
        break;
      case "structValue":
        GrpcStruct.encode(GrpcStruct.wrap(message.kind.value), writer.uint32(42).fork()).join();
        break;
      case "listValue":
        GrpcListValue.encode(GrpcListValue.wrap(message.kind.value), writer.uint32(50).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.kind = { $case: "nullValue", value: reader.int32() as any };
          continue;
        }
        case 2: {
          if (tag !== 17) {
            break;
          }

          message.kind = { $case: "numberValue", value: reader.double() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.kind = { $case: "stringValue", value: reader.string() };
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.kind = { $case: "boolValue", value: reader.bool() };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.kind = { $case: "structValue", value: GrpcStruct.unwrap(GrpcStruct.decode(reader, reader.uint32())) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.kind = {
            $case: "listValue",
            value: GrpcListValue.unwrap(GrpcListValue.decode(reader, reader.uint32())),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  wrap(value: any): GrpcValue {
    const result = {} as any;
    if (value === null) {
      result.nullValue = GrpcNullValue.NULL_VALUE;
    } else if (typeof value === "boolean") {
      result.boolValue = value;
    } else if (typeof value === "number") {
      result.numberValue = value;
    } else if (typeof value === "string") {
      result.stringValue = value;
    } else if (globalThis.Array.isArray(value)) {
      result.listValue = GrpcListValue.wrap(value);
    } else if (typeof value === "object") {
      result.structValue = GrpcStruct.wrap(value);
    } else if (typeof value !== "undefined") {
      throw new globalThis.Error("Unsupported any value type: " + typeof value);
    }
    return result;
  },

  unwrap(message: any): string | number | boolean | Object | null | Array<any> | undefined {
    if (message?.hasOwnProperty("stringValue") && message.stringValue !== undefined) {
      return message.stringValue;
    } else if (message?.hasOwnProperty("numberValue") && message?.numberValue !== undefined) {
      return message.numberValue;
    } else if (message?.hasOwnProperty("boolValue") && message?.boolValue !== undefined) {
      return message.boolValue;
    } else if (message?.hasOwnProperty("structValue") && message?.structValue !== undefined) {
      return GrpcStruct.unwrap(message.structValue as any);
    } else if (message?.hasOwnProperty("listValue") && message?.listValue !== undefined) {
      return GrpcListValue.unwrap(message.listValue);
    } else if (message?.hasOwnProperty("nullValue") && message?.nullValue !== undefined) {
      return null;
    }
    return undefined;
  },
};

function createBaseGrpcListValue(): GrpcListValue {
  return { values: [] };
}

export const GrpcListValue: MessageFns<GrpcListValue> & ListValueWrapperFns = {
  encode(message: GrpcListValue, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.values) {
      GrpcValue.encode(GrpcValue.wrap(v!), writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GrpcListValue {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGrpcListValue();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.values.push(GrpcValue.unwrap(GrpcValue.decode(reader, reader.uint32())));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  wrap(array: Array<any> | undefined): GrpcListValue {
    const result = createBaseGrpcListValue();
    result.values = (array ?? []).map(GrpcValue.wrap);
    return result;
  },

  unwrap(message: GrpcListValue): Array<any> {
    if (message?.hasOwnProperty("values") && globalThis.Array.isArray(message.values)) {
      return message.values.map(GrpcValue.unwrap);
    } else {
      return message as any;
    }
  },
};

wrappers[".google.protobuf.Struct"] = { fromObject: GrpcStruct.wrap, toObject: GrpcStruct.unwrap } as any;

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
}

export interface StructWrapperFns {
  wrap(object: { [key: string]: any } | undefined): GrpcStruct;
  unwrap(message: GrpcStruct): { [key: string]: any };
}

export interface AnyValueWrapperFns {
  wrap(value: any): GrpcValue;
  unwrap(message: any): string | number | boolean | Object | null | Array<any> | undefined;
}

export interface ListValueWrapperFns {
  wrap(array: Array<any> | undefined): GrpcListValue;
  unwrap(message: GrpcListValue): Array<any>;
}
